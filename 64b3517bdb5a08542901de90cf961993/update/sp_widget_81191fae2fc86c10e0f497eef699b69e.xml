<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function($scope, spUtil, $location) {
  /* widget controller */
  var c = this;
	
	$scope.showSection = function(section, header){
			//set sections display based on function parameter
			var containers = document.getElementsByClassName('character-details-container');
			for(var j = 0; j < containers.length; j++){
				containers[j].style.display = 'none';
			}
			document.getElementById(section).style.display = 'inline';
			//set active header based on function parameter
			var sections = document.getElementsByClassName('section');
			for(var i = 0; i < sections.length; i++){
				sections[i].style.border = 'none';
			}
			document.getElementById(header).style.borderBottom = '3px groove white';
	}
		
	$scope.toggleMobileNavMenu = function(){
		var navMenu = document.getElementById('mobileNavMenu');
		var navButtons = document.getElementsByClassName('nav-button');
		if(navMenu.style.height == ''){
			navMenu.style.background = 'black';
			navMenu.style.border = '1px groove #e21414';
			navMenu.style.width = '80%';
			navMenu.style.height = '60%';
			
			for(var i = 0; i < navButtons.length; i++){
				navButtons[i].style.display = 'inline';
			}
		} else{
			navMenu.style.background = 'transparent';
			navMenu.style.border = 'none';
			navMenu.style.width = null;
			navMenu.style.height = null;
			
			for(var i = 0; i < navButtons.length; i++){
				navButtons[i].style.display = 'none';
			}
		}		
	}
	
	$scope.showMobileSection = function(section){
		//set all sections to display none then set selected section to display inline.
		var sections = document.getElementsByClassName('mobile-nav-container');
		for(var i = 0; i < sections.length; i++){
			sections[i].style.display = 'none';
		}
		
		if(section == 'characteristicContainer'){
			document.getElementById('xpInfo').style.display = 'inline';
			document.getElementById('derivedValuesContainer').style.display = 'inline';
		}
		document.getElementById(section).style.display = 'inline';
		$scope.toggleMobileNavMenu();
	}
	
	$scope.editCharacter = function(section){
			if(section == 'description'){
				document.getElementById('notableFeatures').innerHTML = $scope.data.character.notableFeatures;
				document.getElementById('background').innerHTML = $scope.data.character.background;
				var container = document.getElementById('editCharacterDescription');
				container.style.display = 'inline';
				if(parseInt(screen.width) < 762){
					container.style.width = '80%';
				} else{
					container.style.width = '40%';
				}
			} else if(section == 'soak'){
				var container = document.getElementById('editSoakContainer');
				container.style.display = 'inline';
				if(parseInt(screen.width) < 762){
					container.style.width = '80%';
				} else{
					container.style.width = '40%';
				}
			} else if(section == 'wounds'){
				var container = document.getElementById('editWoundsContainer');
				container.style.display = 'inline';
				if(parseInt(screen.width) < 762){
					container.style.width = '80%';
				} else{
					container.style.width = '40%';
				}
			} else if(section == 'strain'){
				var container = document.getElementById('editStrainContainer');
				container.style.display = 'inline';
				if(parseInt(screen.width) < 762){
					container.style.width = '80%';
				} else{
					container.style.width = '40%';
				}			
			} else if(section == 'defense'){
				var container = document.getElementById('editDefenseContainer');
				container.style.display = 'inline';
				if(parseInt(screen.width) < 762){
					container.style.width = '80%';
				} else{
					container.style.width = '40%';
				}
			} else if(section == 'characteristics'){
					var container = document.getElementById('editCharacteristicsContainer');
					container.style.display = 'inline';
					if(parseInt(screen.width) < 762){
						container.style.width = '80%';
					} else{
						container.style.width = '40%';
					}			
			} else if(section == 'name'){
					var container = document.getElementById('editNameContainer');
					container.style.display = 'inline';
					if(parseInt(screen.width) < 762){
						container.style.width = '80%';
					} else{
						container.style.width = '40%';
					}	
			} else if(section == 'gear'){
					var container = document.getElementById('marketplaceContainer');
					container.style.display = 'inline';
					if(parseInt(screen.width) < 762){
						container.style.width = '100%';
					} else{
						container.style.width = '40%';
					}	
			} else if(section == 'credits'){
					var container = document.getElementById('editCreditsContainer');
					container.style.display = 'inline';
					if(parseInt(screen.width) < 762){
						container.style.width = '80%';
					} else{
						container.style.width = '40%';
					}		
			} else if(section == 'talents'){
					var container = document.getElementById('editTalentsContainer');
					container.style.display = 'inline';
					if(parseInt(screen.width) < 762){
						container.style.width = '80%';
					} else{
						container.style.width = '40%';
					}		
			} else if(section == 'skills'){
					var container = document.getElementById('editSkillsContainer');
					container.style.display = 'inline';
					if(parseInt(screen.width) < 762){
						container.style.width = '80%';
					} else{
						container.style.width = '40%';
					}
			}
	}
	
	$scope.saveEdits = function(section){
		if(section == 'description'){
			var gender = document.getElementById('gender').value;
			var age = parseInt(document.getElementById('age').value);
			var eyes = document.getElementById('eyes').value;
			var height = document.getElementById('height').value;
			var weight = document.getElementById('weight').value;
			var hair = document.getElementById('hair').value;
			var notableFeatures = document.getElementById('notableFeatures').value;
			var background = document.getElementById('background').value;
			 c.server.get({action: 'saveCharacterDescription', gender: gender, age: age, eyes: eyes, height: height, weight: weight, hair: hair, notableFeatures: notableFeatures, background: background}).then(function(response){
				 $scope.data.character = response.data.character;
				 $scope.closeEditContainer('description');
			 });
		} else if(section == 'soak'){
			var soak = parseInt(document.getElementById('soakInput').value);
			c.server.get({action: 'saveSoak', soak: soak}).then(function(response){
				$scope.data.character = response.data.character;
				$scope.closeEditContainer('soak');
			});
		} else if(section == 'wounds'){
			var woundsThreshold = parseInt(document.getElementById('woundThresholdInput').value);
			var woundsCurrent = parseInt(document.getElementById('woundCurrentInput').value);
			c.server.get({action: 'saveWounds', threshold: woundsThreshold, current: woundsCurrent}).then(function(response){
				$scope.data.character = response.data.character;
				$scope.closeEditContainer('wounds');
			});
		} else if(section == 'strain'){
			var strainThreshold = parseInt(document.getElementById('strainThresholdInput').value);
			var strainCurrent = parseInt(document.getElementById('strainCurrentInput').value);
			c.server.get({action: 'saveStrain', threshold: strainThreshold, current: strainCurrent}).then(function(response){
				$scope.data.character = response.data.character;
				$scope.closeEditContainer('strain');
			});		
		} else if(section == 'defense'){
			var ranged = parseInt(document.getElementById('rangedDefenseInput').value);
			var melee = parseInt(document.getElementById('meleeDefenseInput').value);
			c.server.get({action: 'saveDefense', ranged: ranged, melee: melee}).then(function(response){
				$scope.data.character = response.data.character;
				$scope.closeEditContainer('defense');
			});		
		} else if(section == 'characteristics'){
			var brawn = parseInt(document.getElementById('brawn').value);
			var agility = parseInt(document.getElementById('agility').value);
			var intellect = parseInt(document.getElementById('intellect').value);
			var cunning = parseInt(document.getElementById('cunning').value);
			var willpower = parseInt(document.getElementById('willpower').value);
			var presence = parseInt(document.getElementById('presence').value);
			if(brawn <= 6 && agility <= 6 && intellect <= 6 && cunning <= 6 && willpower <= 6 && presence <= 6){
				c.server.get({action: 'saveCharacteristics', brawn: brawn, agility: agility, intellect: intellect, cunning: cunning, willpower: willpower, presence: presence}).then(function(response){
					$scope.data.character = response.data.character;
					$scope.closeEditContainer('characteristics');
				});
			} else{
				alert('Characteristics can be raised above 6.');
			}
		} else if(section == 'name'){
			var name = document.getElementById('nameInput').value;
			c.server.get({action: 'saveName', name: name}).then(function(response){
				$scope.data.character = response.data.character;
				$scope.closeEditContainer('name');
			});
		} else if(section == 'credits'){
			var creds = parseInt(document.getElementById('creditsInput').value);
			c.server.get({action: 'saveCredits', credits: creds}).then(function(response){
				$scope.data.character = response.data.character;
				$scope.closeEditContainer('credits');
			});
		}
	}
	
	$scope.toggleGearInfo = function(item){
		if(item == 'all'){
			var allChev = document.getElementById('allChevron');
			var icons = document.getElementsByClassName('gear-info-icon');
			var infoSections = document.getElementsByClassName('full-gear-detail');
			if(allChev.style.transform == 'rotate(-90deg)'){
				for(var i = 0; i < icons.length; i++){
					icons[i].style.transform = 'rotate(0deg)';
					infoSections[i].style.display = 'none';
					infoSections[i].style.maxHeight = null;
				}
			} else{
				for(var i = 0; i < icons.length; i++){
					icons[i].style.transform = 'rotate(-90deg)';
					infoSections[i].style.display = 'inline';
					infoSections[i].style.maxHeight = infoSections[i].scrollHeight + 'px';
				}
			}
		} else{
			var element = document.getElementById(item);
			var parentID = 'parent' + item;
			var parent = document.getElementById(parentID);
			var iconString = item + 'Chevron';
			var icon = document.getElementById(iconString);
			if(element.style.maxHeight == 0 || element.style.maxHeight == null){
				element.style.display = 'inline';
				element.style.maxHeight = element.scrollHeight + 'px';
				icon.style.transform = 'rotate(-90deg)';
			} else{
				element.style.maxHeight = null;
				element.style.display = 'none';
				icon.style.transform = 'rotate(0deg)';
			}
		}
	}
	
	$scope.removeItem = function(itemID){
		c.server.get({action: 'deleteGear', sysID: itemID}).then(function(response){
			$scope.data.characterGear = response.data.characterGear;
		});
	}
	
	$scope.filterGear = function(type){
		if(type == 'all'){
			 $scope.data.availableGear = $scope.data.availableGearAll;
		} else{
			var tempArray = [];
			for(var i = 0; i < $scope.data.availableGearAll.length; i++){
				if($scope.data.availableGearAll[i].typeID == type){
					 tempArray.push($scope.data.availableGearAll[i]);
				}
			}
			$scope.data.availableGear = tempArray;
		}
	}
	
	$scope.purhcaseItem = function(item){
		var qID = item.name + 'QuantityInput';
		var quantity = document.getElementById(qID).value;
		var tempPrice = parseInt(quantity) * parseInt(item.price);
		if(tempPrice <= $scope.data.character.creditsInt){
			c.server.get({action: 'purchaseItem', item: item, quantity: quantity}).then(function(response){
				$scope.data.characterGear = response.data.characterGear;
				$scope.data.character = response.data.character;
			});
		} else{
			alert('You lack the necessary funds to purchase that item or quantity');
		}
	}
	
	$scope.closeEditContainer = function(section){
		var container = '';
		if(section == 'description'){
			container = document.getElementById('editCharacterDescription');
		} else if(section == 'soak'){
			container = document.getElementById('editSoakContainer');
		} else if(section == 'wounds'){
			container = document.getElementById('editWoundsContainer');				
		} else if(section == 'strain'){
			container = document.getElementById('editStrainContainer');
		} else if(section == 'defense'){
			container = document.getElementById('editDefenseContainer');
		} else if(section == 'characteristics'){
			container = document.getElementById('editCharacteristicsContainer');
		} else if(section == 'name'){
			container = document.getElementById('editNameContainer');
		} else if(section == 'credits'){
			container = document.getElementById('editCreditsContainer');
		} else if(section == 'gear'){
			container = document.getElementById('marketplaceContainer');
		} else if(section == 'talents'){
			container = document.getElementById('editTalentsContainer');
		} else if(section == 'talentInfoBox'){
			container = document.getElementById('talentInfoBox');
		} else if(section == 'skills'){
			container = document.getElementById('editSkillsContainer');
		}
		
		container.style.width = null;
		container.style.display = 'none';
	}
	
	$scope.toggleTalentInfo = function(item){
		$scope.data.currentTalentInfo = item;
		document.getElementById('talentInfoBox').style.display = 'inline';
	}
	
	$scope.purchaseTalent = function(item){
		c.server.get({action: 'purchaseTalent', talent: item, talentID: item.sysID}).then(function(response){
			$scope.data.character = response.data.character;
			c.server.refresh();
		});
	}
	
	$scope.increaseSkill = function(skill){
		c.server.get({action: 'saveSkill', skill: skill}).then(function(response){
			$scope.data.character = response.data.character;
			$scope.data.skills = response.data.skills;
		});
	}
	
};]]></client_script>
        <controller_as>c</controller_as>
        <css>.image-background{
	position:fixed;
  top:65px;
  left:0;
  height: 1000px; /* You must set a specified height */
  background-position: center !important; /* Center the image */
  background-attachment: fixed;
  background-repeat:no-repeat;
  background-size:cover !important;
	opacity:.7;
  z-index:-5;
}

.name{
	font-size:28px;
  font-weight:bold;
}

.id-info{
	font-size:18px;
  margin-bottom:30px;
}

.total-xp,.available-xp{
	background-color:white;
  border-radius: 45px 45px 45px 45px;
  border:2px groove black;
}

.xp-label{
	background-color:#2f3860;
  padding:3px 12px 3px 12px;
  text-align:center;
  border-radius:20px;
}

.xp-value{
	font-size:18px;
  text-align:center;
  color:black;
  padding-top:10px;
  padding-bottom:10px;
}

.derived-values{
	text-align:center;
}

.dv-header{
	background-color:#2f3860;
  padding: 4px 15px 4px 15px;
  border-radius:20px;
  text-align:center;
  color:white;
}

.dv-container{
	background-color:white;
  min-height:70px;
  text-align:center;
  color:black;
  border-radius:20px;
  border:1px groove black;
}

.threshold-container{
	border-right:1px groove black;
  padding:0;
}

.current-container{
	padding:0;
}

.threshold-value-header{
 color:white;
}

.threshold-header-container{
	background-color: #e21414;
}

.current-header-container{
	color:white;
  background-color:#1933f4;
}

.threshold-value, .current-value, #soakValue{
	font-size:22px;
  font-weight:bold;
}

#soak{
	padding-bottom:20px;
}

#soakValue{
	margin-top:5px;
}

.characteristics-container{
	text-align:center;
  margin-top:40px;
}

.characteristics-header{
	margin-bottom:20px;
  font-size:22px;
}

.characteristic{
	background-color:black;
  border:2px groove black;
}

.c-value{
  border-radius:5px 5px 0px 0px;
  padding-top:8px;
  padding-bottom:8px;
	background:white;
  color:black;
  font-size:22px;
  font-weight:bold;
}

.c-value-number{
	border:2px groove black;
  border-radius:40px;
  padding:0px 8px 0px 8px;
}

.c-label{
	background-color: #e21414;
  border-radius:0px 0px 5px 5px;
}

.fa-medal{
	color: #54f403;
}

.skill-container{
	margin-top:40px;
  margin-bottom:40px;
}

.skills-container-header{
	font-size: 22px;
  text-align:center;
}

.skills-body{
	border:1px groove white;
  background-color:black;
}

.skill-name-header{
	text-align:left;
  font-size:18px;
}

.skill-rank-header{
	text-align:center;
  font-size:18px;
}

.skill-column-headers{
	border-bottom:1px groove white;
}

.skill{
	border-bottom:1px dotted white;
  padding:5px 0px 5px 0px;
}

.skill-name{
	text-align:left;
  font-size:16px;
}

.skill-rank{
	text-align:center;
  font-size:16px;
}

.section-header-container{
	margin-top:40px;
}

.section-label{
	font-size:18px;
  padding:0;
}

.sw-section-label{
	padding:0;
}

.section{
	margin-right:5px;
  background-color:black;
}

.sections,.section{
	padding:0;
}

#talentsContainer{
	display:inline;
}

#purchaseTalentsButtonContainer{
	margin-top:20px;
}

#talentsSelector{
	border-bottom:3px groove white;
}

.character-details-container{
	display:none;
  background-color:black;
}

.no-talents{
	padding-top:40px;
}

#noTalentsContainer, #noGearContainer{
	font-size:18px;
  text-align:center;
}

#manageGearButton{
	background:transparent;
  border:none;
}

.talents-headers{
	border-bottom:2px groove white;
  margin-top:20px;
}

.talents-body{
	margin-top:15px;
  text-align:left;
  padding-bottom:20px;
}

.talent-name-header, .talent-description-header{
	font-size:18px;
}

.talent-name, .talent-description{
	padding:0;
}

.talent{
	border-bottom:1px dotted white;
  padding-top:10px;
  padding-bottom:10px;
  font-size:16px;
}

#characterDescriptionContainer{
	padding-top:20px;
}

.description-field{
	margin-bottom:15px;
}

.desc-label{
	font-weight:bold;
  font-size:20px;
}

.skill-rank{
	font-size:20px;
}

.desc-value{
	font-size:16px;
}

.edit-container{
	font-size:16px;
  text-align:right;
  color:#e21414;
  margin-bottom:20px;
}

.sw-input{
	border:1px groove #e21414;
  background-color:black;
  border-radius:20px;
  margin-bottom:10px;
}

.edit-character{
	display:none;
  width:0;
  position:fixed;
  top:0;
  right:0;
  height:98%;
  overflow-y:scroll;
  background-color:black;
  border:1px groove #e21414;
  transition:all 1s ease-in-out;
}

.close-button{
	color:#e21414;
  margin-top:20px;
  text-align:right;
  font-size:24px;
}

#notableFeatures, #background{
	width:100%;
  height:100px;
}

#saveEditsButton{
	background:transparent;
  box-shadow: 0px 0px 4px 2px #1933f4;
  border: 1px groove #1933f4;
  border-radius:20px;
  padding:3px 25px 3px 25px;
  text-align:center;
  font-size:18px;
  margin-top:20px;
}

#swSaveButton{
	font-size:14px;
}

.save-button-container{
	text-align:center;
  margin-bottom:20px;
}

#brawn,#agility,#intellect,#cunning,#willpower,#presence,#soakInput,#woundThresholdInput,#woundCurrentInput,#strainThresholdInput,#strainCurrentInput,#rangedDefenseInput,#meleeDefenseInput{
	text-align:center;
}

.credits-container{
	text-align:right;
  margin-top:20px;
  margin-bottom:20px;
}

.credits{
	font-size:18px;
  font-weight:bold;
}

.gear-headers{
	font-size:18px;
  font-weight:bold;
  border-bottom:2px groove white;
  margin-bottom: 10px;
}

.gear-item-container{
	padding:0;
}

.gear-detail{
	margin-bottom:10px;
}

.cg-item{
	font-size:16px;
  padding:10px 0px 10px 0px;
  border-bottom:1px dotted white;
}

.full-gear-detail{
	display:none;
  max-height:0;
  transition:all .5s ease-in-out;
}

.fa-chevron-left{
	transition:transform .5s ease-in-out;
  position:absolute;
  right:10px;
}

#removeItemButtonContainer{
	margin-top:20px;
  text-align:center;
}

#removeItemButton{
	color:white;
  border:1px groove #e21414;
  border-radius:20px;
  box-shadow:0px 0px 6px 2px #e21414;
  background:transparent;
  padding:5px 15px 5px 15px;
  margin-bottom:20px;
}

.filter-buttons{
	text-align:center;
}

.filter-button{
	background:transparent;
  border:1px groove #1933f4;
  border-radius:20px;
  box-shadow: 0px 0px 6px 2px #1933f4;
  padding:5px 15px 5px 15px;
  margin-top:30px;
  min-width:90px;
}

.badge{
	background-color:#2b2a2a;
}

.marketplace-items-container{
	margin-top: 50px;
  margin-bottom:30px;
}

.purchase-gear-button{
	background:transparent;
  border:1px groove #54f403;
  border-radius:20px;
  box-shadow:0px 0px 6px 2px #54f403;
}

.marketplace-item{
	margin-top:10px;
  border-bottom:1px dotted white;
}

.sw-filter{
	font-size:11px !important;
}

.talent-item{
	padding:10px 2px 10px 2px;
  border-bottom:1px dotted white;
}

#purchaseTalentsContainer{
	padding-bottom:20px;
}

#talentInfoBox{
	display:none;
  position:fixed;
  top:40px;
  left:0;
  width:98%;
  max-height:600px;
  overflow-y:scroll;
  background-color:black;
  border:2px groove #1933f4;
  box-shadow:0px 0px 8px 3px #1933f4;
}

.talent-info{
	font-size:18px;
}

#talentInfoName,#talentInfoActive{
  margin-bottom:20px;
	text-align:center;
}

#talentInfoPurchaseContainer{
	text-align:center;
  margin-top:20px;
  margin-bottom:20px;
}

.lightsabers-plus-minus{
	transform: rotate(45deg);
  color:lightgray;
}

.skill-detail{
	font-size:18px;
}

.edit-skills-list{
	margin-bottom:40px;
}

#increaseSkillButton{
	background:transparent;
  border:1px groove #1933f4;
  border-radius:20px;
  box-shadow:0px 0px 6px 2px #1933f4;
}

.skill-increase-button{
	text-align:right;
}

.edit-skills{
	padding:10px 0px 10px 0px;
  border-bottom:1px dotted white;
}
  
@media only screen and (min-width:762px){
  .lg-hidden{
  	display:none;
  }
}

@media only screen and (max-width:762px){
  .first-filter{
	margin-right:0;
}
  
  .purchase-gear-button{
  	font-size:11px;
  }
  
  #marketplaceContainer{
  	padding-bottom:50px;
  }
  
  .talent-header,.talents-headers,#purchaseTalentsContainer,.talent-detail,.marketplace-body,#marketplaceContainer,.marketplace-items-container,.marketplace-item,#characterGearList,.full-gear-detail,.gear-item-container,.cg-item,.character-gear-container,.gear-headers,.gear-header,.gear-detail-label,.gear-detail-value{
  	padding-left:0;
    padding-right:0;
  }
  
  #gearContainer{
  	margin-bottom:100px;
  }
  
  .save-button-container{
  	margin-bottom:30px;
  }
  
  .skill-rank{
  	font-size:18px;
  }
  
  #soak,#wounds{
  	margin-bottom:8px;
  }
  
  .open-menu-container{
  	z-index:5;
  }
  
  .has-talents,.talents-headers,.talents-body,.talent,.talents-container,.character-sheet-container,.main-character-info{
  	padding:0;
  }
  
  .talents-container{
  	z-index:0;
  }
  
  .talents-body{
  	margin-bottom:80px;
  }
  
  #mobileNavMenu{
  	position:fixed;
    bottom:50px;
    right:40px;
    height:0;
    width:0;
    border-radius:5px;
    transition:all .5s ease-in-out;
    background-color:transparent;
    padding-top:20px;
    z-index:5;
  }
  
  .nav-button{
  	display:none;
    border:1px groove #e21414;
    border-radius:5px;
    font-size:16px;
    text-align:center;
    padding:0;
    margin-bottom:10px;
    margin-bottom:10px;
  }
  
  #characteristicContainer{
  	margin-bottom:50px;
  }
  
  .skill-container{
  	padding:0;
  }
  
  .open-menu-container{
  	position:fixed;
    bottom:20px;
    right:15px;
    border:2px groove #fb4b30;
    border-radius:50px;
    background-color:black;
    padding:8px;
  }
  
  .fa-journal-whills{
  	color:#ff9600;
    font-size:32px;
  }
  
  .xs-hidden{
		display:none;
	}
  
  #talentsContainer,#skillsContainer{
		display:none;
	}
  
  .c-label{
  	font-size: 11px;
    padding:0;
  }
  
  .xp-info{
  	padding:0;
    margin-bottom:40px;
  }
  
  .current-header-container, .threshold-header-container{
  	padding:0;
    font-size:10px;
  }
  
  .dv-container{
  	min-height:80px;
  }
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>star_wars_character_sheet</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Star Wars Character Sheet</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
  /* populate the 'data' object */
  /* e.g., data.table = $sp.getValue('table'); */
//retrieve caharacter details and pass to data object.
var characterID = $sp.getParameter('character_id');
var charGR = new GlideRecord('x_176383_star_wars_character');
		charGR.get(characterID);
		data.character = {
			name: charGR.name + '' || 'Name your character',
			species: charGR.species.getDisplayValue(),
			career: charGR.career.getDisplayValue(),
			specializationIDs: charGR.career_specializations.toString(),
			specializationNames: '',
			brawn: charGR.brawn + '',
			agility: charGR.agility + '',
			intellect: charGR.intellect + '',
			cunning: charGR.cunning + '',
			willpower: charGR.willpower + '',
			presence: charGR.presence + '',
			availableXPInt: parseInt(charGR.available_xp),
			availableXPString: charGR.available_xp + '',
			totalXPInt: parseInt(charGR.total_xp),
			totalXPString: charGR.total_xp + '',
			strainCurrentInt: parseInt(charGR.strain_current),
			strainCurrentString: charGR.strain_current + '',
			strainThresholdInt: parseInt(charGR.strain_threshold),
			strainThresholdString: charGR.strain_threshold + '',
			woundCurrentInt: parseInt(charGR.wounds_current),
			woundCurrentString: charGR.wounds_current + '',
			woundThresholdInt: parseInt(charGR.wounds_threshold),
			woundThresholdString: charGR.wounds_threshold + '',
			soakInt: parseInt(charGR.soak_value),
			soakString: charGR.soak_value + '',
			rangedDefenseInt: parseInt(charGR.defense_ranged),
			rangedDefenseString: charGR.defense_ranged + '',
			meleeDefenseInt: parseInt(charGR.defense_melee),
			meleeDefenseString: charGR.defense_melee + '',
			creditsInt: parseInt(charGR.credits),
			creditsString: charGR.credits + '',
			age: charGR.age + '',
			eyes: charGR.eyes + '',
			hair: charGR.hair + '',
			gender: charGR.gender + '',
			height: charGR.height + '',
			weight: charGR.weight + '',
			criticalInjuriesInt: parseInt(charGR.critical_injuries),
			criticalInjuriesString: charGR.critical_injuries + '',
			forceRatingInt: parseInt(charGR.force_rating),
			forceRatingString: charGR.force_rating + '',
			background: charGR.background + '',
			notableFeatures: charGR.notable_features + ''
		};
	
	//retrieve career specialization display values
	var spec = new GlideRecord('x_176383_star_wars_career_specialization');
	spec.addQuery('sys_id', 'IN', data.character.specializationIDs);
	spec.orderBy('name');
	spec.query();
	while(spec.next()){
		if(data.character.specializationNames == ''){
			data.character.specializationNames = spec.getDisplayValue();
		} else{
			data.character.specializationNames += ', ' + spec.getDisplayValue();
		}
	}
		
	//set background image
	//remove the db_image check once all images are loaded
	var imgCheck = data.character.career.toLowerCase() + '.png';
	var img = new GlideRecord('db_image');
	img.addQuery('name', imgCheck);
	img.query();
	if(img.next()){
		data.backgroundURL = '/' + img.name;
	} else{
		data.backgroundURL = '/sw_space.jpg';
	}
	
	//retrieve character skills and values
	data.skills = [];
	var skills = new GlideRecord('x_176383_star_wars_m2m_character_skills');
	skills.addQuery('character', characterID);
	skills.orderBy('skill.name');
	skills.query();
	while(skills.next()){
		var rec = {
			name: skills.skill.name + '',
			rankInt: parseInt(skills.rank),
			rankString: skills.rank + '',
			costToNextRank: parseInt(skills.cost_to_next_rank),
			isCareer: skills.career + '',
			sysID: skills.sys_id + ''
		};
		data.skills.push(rec);
	}
	
	//retrieve talents
	data.talents = [];
	var purchasedTalentIDs = [];
	var talent = new GlideRecord('x_176383_star_wars_character_talents_m2m');
	talent.addQuery('character', characterID);
	talent.orderBy('talent.talent.name');
	talent.query();
	var index = 0;
	while(talent.next()){
		purchasedTalentIDs.push(talent.talent.sys_id + '');
		if(index > 0 && data.talents[index - 1].name == talent.talent.talent.getDisplayValue()){
			data.talents[index - 1].ranks = (parseInt(data.talents[index - 1].ranks) + 1) + '';
		} else{
			var rec = {
					name: talent.talent.talent.getDisplayValue(),
					ranks: '1',
					description: talent.talent.talent.description + '',
					forceTalent: talent.talent.talent.force_talent + '',
					passiveActive: talent.talent.talent.passive_or_active + '',
					tier: talent.talent.rank + '',
					careerSpec: talent.talent.career_specialization.sys_id + ''
				};
			data.talents.push(rec);
			index++;
		}
	}
	//retrieve talent tree
	//retrieve talent trees for specializations
	data.availableTalents = [];
	var talentTree = new GlideRecord('x_176383_star_wars_career_specialization_talent_tree_m2m');
	talentTree.addQuery('career_specialization', 'IN', data.character.specializationIDs);
	talentTree.orderBy('career_specialization');
	talentTree.orderBy('rank');
	talentTree.orderBy('talent.name');
	talentTree.query();
	while(talentTree.next()){
		var t = {
			sysID: talentTree.sys_id + '',
			name: talentTree.talent.getDisplayValue(),
			tier: parseInt(talentTree.rank),
			tierString: talentTree.rank + '',
			specID: talentTree.career_specialization.sys_id + '',
			specName: talentTree.career_specialization.getDisplayValue(),
			costToPurchase: parseInt(talentTree.xp_cost),
			description: talentTree.talent.description + '',
			activeOrPassive: talentTree.talent.passive_or_active.getDisplayValue(),
			forceTalent: talentTree.talent.force_talent + '',
			preReqs: talentTree.pre_requisite_talents.toString().split(','),
			isPurchased: false
		};
		if((t.tier == 1 || t.preReqs[0] == '') && t.costToPurchase <= data.character.availableXPInt){
			 t.canPurchase = true;
		}
		data.availableTalents.push(t);
	}
	//var spliceIndex = [];
	for(var i = 0; i < data.availableTalents.length; i++){
		for(var j = 0; j < purchasedTalentIDs.length; j++){
			if(data.availableTalents[i].preReqs.join().indexOf(purchasedTalentIDs[j]) >= 0 && data.character.availableXPInt >= data.availableTalents[i].costToPurchase){
				 data.availableTalents[i].canPurchase = true;
			}
			if(data.availableTalents[i].sysID == purchasedTalentIDs[j]){
				data.availableTalents[i].isPurchased = true;
			}
		}
	}
	
	//retrieve inventory list
	data.availableGear = [];
	var gear = new GlideRecord('x_176383_star_wars_gear');
	gear.orderBy('type');
	gear.orderBy('name');
	gear.query();
	while(gear.next()){
		var g = {
			name: gear.name + '',
			encumbrance: gear.encumbrance + '',
			rarity: gear.rarity + '',
			type: gear.type.getDisplayValue(),
			typeID: gear.type + '',
			skillUsed: gear.skill_used.getDisplayValue(),
			price: gear.price + '',
			defense: gear.defense + '',
			soak: gear.soak + '',
			damage: gear.base_damage + '',
			range: gear.range.getDisplayValue(),
			hardPoints: gear.hard_points + '',
			description: gear.description + '',
			crit: gear.critical_rating + '',
			hpRequired: gear.hp_required + '',
			sysID: gear.sys_id + ''
		};
		data.availableGear.push(g);
	}
	data.availableGearAll = data.availableGear;
	
	//retrieve current character gear
	data.characterGear = [];
	var cg = new GlideRecord('x_176383_star_wars_character_gear_m2m');
	cg.addQuery('character', characterID);
	//cg.orderBy('item.type');
	cg.orderBy('item.name');
	cg.query();
	while(cg.next()){
		var cgObj = {
			name: cg.item.getDisplayValue(),
			quantity: cg.quantity + '',
			damage: cg.item.base_damage + '',
			crit: cg.item.critical_rating + '',
			defense: cg.item.defense + '',
			soak: cg.item.soak + '',
			encumbrance: cg.item.encumbrance + '',
			type: cg.item.type.getDisplayValue(),
			typeID: cg.item.type + '',
			skillUsed: cg.item.skill_used.getDisplayValue(),
			range: cg.item.range.getDisplayValue(),
			hardPoints: cg.item.hard_points + '',
			description: cg.item.description + '',
			sysID: cg.sys_id + '',
			iconID: cg.sys_id + 'Chevron'
		};
		var wq = new GlideRecord('x_176383_star_wars_gear_special');
		wq.addQuery('item', cg.item.sys_id);
		wq.orderBy('weapon_quality.name');
		wq.query();
		var qualityString = '';
		while(wq.next()){
			if(qualityString == ''){
				qualityString = wq.weapon_quality.getDisplayValue() + ': ' + wq.rank;
			} else{
				qualityString += ', ' + wq.weapon_quality.getDisplayValue() + ': ' + wq.rank;
			}
		}
		cgObj.weaponQualities = qualityString;
		data.characterGear.push(cgObj);
	}
	
	//process character updates
	if(input){
		if(input.action == 'saveCharacterDescription'){
			charGR.gender = input.gender;
			charGR.age = input.age;
			charGR.eyes = input.eyes;
			charGR.height = input.height;
			charGR.weight = input.weight;
			charGR.hair = input.hair;
			charGR.notable_features = input.notableFeatures;
			charGR.background = input.background;
			charGR.update();
			data.character.gender = charGR.gender + '';
			data.character.age = charGR.age + '';
			data.character.eyes = charGR.eyes + '';
			data.character.height = charGR.height + '';
			data.character.weight = charGR.weight + '';
			data.character.hair = charGR.hair + '';
			data.character.notableFeatures = charGR.notable_features + '';
			data.character.background = charGR.background + '';
		} else if(input.action == 'saveSoak'){
			charGR.soak_value = input.soak;
			charGR.update();
			data.character.soakInt = parseInt(charGR.soak_value);
			data.character.soakString = charGR.soak_value + '';
		} else if(input.action == 'saveWounds'){
			charGR.wounds_threshold = input.threshold;
			charGR.wounds_current = input.current;
			charGR.update();
			data.character.woundThresholdInt = parseInt(charGR.wounds_threshold);
			data.character.woundThresholdString = charGR.wounds_threshold + '';
			data.character.woundCurrentInt = parseInt(charGR.wounds_current);
			data.character.woundCurrentString = charGR.wounds_current + '';
		} else if(input.action == 'saveStrain'){
			charGR.strain_threshold = input.threshold;
			charGR.strain_current = input.current;
			charGR.update();
			data.character.strainThresholdInt = parseInt(charGR.strain_threshold);
			data.character.strainThresholdString = charGR.strain_threshold + '';
			data.character.strainCurrentInt = parseInt(charGR.strain_current);
			data.character.strainCurrentString = charGR.strain_current + '';
		} else if(input.action == 'saveDefense'){
			charGR.ranged_defense = input.ranged;
			charGR.melee_defense = input.melee;
			charGR.update();
			data.character.rangedDefenseInt = parseInt(charGR.ranged_defense);
			data.character.rangedDefenseString = charGR.ranged_defense + '';
			data.character.meleeDefenseInt = parseInt(charGR.melee_defense);
			data.character.meleeDefenseString = charGR.melee_defense + '';				
		} else if(input.action == 'saveCharacteristics'){
			charGR.brawn = input.brawn;
			charGR.agility = input.agility;
			charGR.intellect = input.intellect;
			charGR.cunning = input.cunning;
			charGR.willpower = input.willpower;
			charGR.presence = input.presence;
			charGR.update();
			data.character.brawn = charGR.brawn + '';
			data.character.agility = charGR.agility + '';
			data.character.intellect = charGR.intellect + '';
			data.character.cunning = charGR.cunning + '';
			data.character.willpower = charGR.willpower + '';
			data.character.presence = charGR.presence + '';
		} else if(input.action == 'saveName'){
			charGR.name = input.name;
			charGR.update();
			data.character.name = charGR.name + '';
		} else if(input.action == 'saveCredits'){
			charGR.credits = input.credits;
			charGR.update();
			data.character.creditsInt = parseInt(charGR.credits);
			data.character.creditsString = data.character.creditsInt + '';
		} else if(input.action == 'deleteGear'){
			cg.get(input.sysID);
			cg.deleteRecord();
			for(var i = 0; i < data.characterGear.length; i++){
				if(data.characterGear[i].sysID == input.sysID){
					 data.characterGear.splice(i, 1);
				}
			}
		} else if(input.action == 'purchaseItem'){
			charGR.get(characterID);
			charGR.credits = data.character.creditsInt - parseInt(input.item.price);
			charGR.update();
			data.character.creditsInt = parseInt(charGR.credits);
			data.character.creditsString = data.character.creditsInt + '';
			cg = new GlideRecord('x_176383_star_wars_character_gear_m2m');
			cg.addQuery('item.name', input.item.name).addCondition('character', characterID);
			cg.query();
			if(cg.next()){
				cg.quantity = (parseInt(cg.quantity) + parseInt(input.quantity));
				cg.update();
				for(var i = 0; i < data.characterGear.length; i++){
					if(data.characterGear[i].sysID == cg.sys_id + ''){
						 data.characterGear[i].quantity = cg.quantity + '';
					}
				}
			} else{
				cg.initialize();
				cg.item = input.item.sysID;
				cg.character = characterID;
				cg.quantity = parseInt(input.quantity);
				cg.insert();
				var cgObj = {
					name: cg.item.getDisplayValue(),
					quantity: cg.quantity + '',
					damage: cg.item.base_damage + '',
					crit: cg.item.critical_rating + '',
					defense: cg.item.defense + '',
					soak: cg.item.soak + '',
					encumbrance: cg.item.encumbrance + '',
					type: cg.item.type.getDisplayValue(),
					typeID: cg.item.type + '',
					skillUsed: cg.item.skill_used.getDisplayValue(),
					range: cg.item.range.getDisplayValue(),
					hardPoints: cg.item.hard_points + '',
					description: cg.item.description + '',
					sysID: cg.sys_id + '',
					iconID: cg.sys_id + 'Chevron'
				};
				data.characterGear.push(cgObj);
			}
		} else if(input.action == 'purchaseTalent'){
			talent.initialize();
			talent.talent = input.talentID;
			talent.character = characterID;
			talent.insert();
			charGR.get(characterID);
			charGR.available_xp = data.character.availableXPInt - parseInt(input.talent.costToPurchase);
			charGR.update();
		} else if(input.action == 'saveSkill'){
			var skill = new GlideRecord('x_176383_star_wars_m2m_character_skills');
			skill.get(input.skill.sysID + '');
			skill.rank = parseInt(input.skill.rankInt) + 1;
			var newCost = 0;
			if(input.skill.isCareer == 'true'){
				newCost = (parseInt(skill.rank) + 1) * 5;
			} else{
				newCost = ((parseInt(skill.rank) + 1) * 5) + 5;
			}
			skill.cost_to_next_rank = newCost;
			skill.update();
			data.character.availableXPInt -= parseInt(input.skill.costToNextRank);
			data.character.availableXPString = data.character.availableXPInt + '';
			charGR.get(characterID);
			charGR.available_xp = data.character.availableXPInt;
			charGR.update();
			for(var s = 0; s < data.skills.length; s++){
				if(data.skills[s].sysID == input.skill.sysID){
					data.skills[s].rankInt++;
					data.skills[s].rankString = data.skills[s].rankInt + '';
					data.skills[s].costToNextRank = newCost;
				}
			}
		}
	}
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-10-27 13:34:00</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>81191fae2fc86c10e0f497eef699b69e</sys_id>
        <sys_mod_count>554</sys_mod_count>
        <sys_name>Star Wars Character Sheet</sys_name>
        <sys_package display_value="Star Wars RPG" source="x_176383_star_wars">64b3517bdb5a08542901de90cf961993</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Star Wars RPG">64b3517bdb5a08542901de90cf961993</sys_scope>
        <sys_update_name>sp_widget_81191fae2fc86c10e0f497eef699b69e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-11-06 04:41:36</sys_updated_on>
        <template><![CDATA[<head>
  <script src="https://kit.fontawesome.com/035f51c999.js"></script>
</head>

<div class="col-xs-12 image-background" style="background: url({{data.backgroundURL}})"></div>

<div class="col-xs-12 character-sheet-container">
  <div class="col-xs-12 main-character-info">
    <!-- name, species, career, XP -->
  	<span class="col-xs-12 col-md-8 name" ng-click="editCharacter('name')">{{data.character.name}}</span>
    <span class="col-xs-12 col-md-8 star-wars-text" ng-click="editCharacter('name')">{{data.character.name}}</span>
    <span class="col-xs-12 col-md-8 id-info"><text id="species">Species: {{data.character.species}}</text><br> Career:<text id="career">{{data.character.career}}</text><br> Specializations:<text id="specializations">{{data.character.specializationNames}}</text></span>
    <span class="col-xs-12 col-md-4 xp-info-container">
      <span class="col-xs-12 mobile-nav-container xp-info" id="xpInfo">
        <span class="col-xs-6 total-xp">
          <span class="col-xs-12 xp-value">{{data.character.totalXPString}}</span>
          <span class="col-xs-12 xp-label">TOTAL XP</span>
        </span>
        <span class="col-xs-6 available-xp">
          <span class="col-xs-12 xp-value">{{data.character.availableXPString}}</span>
          <span class="col-xs-12 xp-label">AVAILABLE XP</span>
        </span>
      </span>
    </span>
    <!-- derived values container -->
    <span class="col-xs-12 derived-values mobile-nav-container" id="derivedValuesContainer">
      <span class="col-xs-6 col-md-3 dv-container" id="soak" ng-click="editCharacter('soak')">
        <span class="col-xs-12"><text class="dv-header" id="soakHeader">SOAK</text></span>
        <span class="col-xs-12"><text id="soakValue">{{data.character.soakString}}</text></span>
      </span>
      <span class="col-xs-6 col-md-3 dv-container" id="wounds" ng-click="editCharacter('wounds')">
        <span class="col-xs-12"><text class="dv-header" id="woundHeader">WOUNDS</text></span>
        <span class="col-xs-6 threshold-container">
          <span class="col-xs-12"><text class="threshold-value" id="woundThreshold">{{data.character.woundThresholdString}}</text></span>
          <span class="col-xs-12 threshold-header-container"><text class="threshold-value-header" id="woundThresholdHeader">THRESHOLD</text></span>
        </span>
        <span class="col-xs-6 current-container">
          <span class="col-xs-12"><text class="current-value" id="woundCurrent">{{data.character.woundCurrentString}}</text></span>
          <span class="col-xs-12 current-header-container"><text class="current-value-header" id="woundCurrentHeader">CURRENT</text></span>
        </span>
      </span>
      <span class="col-xs-6 col-md-3 dv-container" id="strain" ng-click="editCharacter('strain')">
        <span class="col-xs-12"><text class="dv-header" id="strainHeader">STRAIN</text></span>
        <span class="col-xs-6 threshold-container">
          <span class="col-xs-12"><text class="threshold-value" id="strainThreshold">{{data.character.strainThresholdString}}</text></span>
          <span class="col-xs-12 threshold-header-container"><text class="threshold-value-header" id="strainThresholdHeader">THRESHOLD</text></span>
        </span>
        <span class="col-xs-6 current-container">
          <span class="col-xs-12"><text class="current-value" id="strainCurrent">{{data.character.strainCurrentString}}</text></span>
          <span class="col-xs-12 current-header-container"><text class="current-value-header" id="strainCurrentHeader">CURRENT</text></span>
        </span>
       </span>
      <span class="col-xs-6 col-md-3 dv-container" id="defense" ng-click="editCharacter('defense')">
        <span class="col-xs-12"><text class="dv-header" id="defenseHeader">DEFENSE</text></span>
        <span class="col-xs-6 threshold-container">
          <span class="col-xs-12"><text class="threshold-value" id="rangedDefense">{{data.character.rangedDefenseString}}</text></span>
          <span class="col-xs-12 threshold-header-container"><text class="threshold-value-header" id="rangedDefenseHeader">RANGED</text></span>
        </span>
        <span class="col-xs-6 current-container">
          <span class="col-xs-12"><text class="current-value" id="meleeDefense">{{data.character.meleeDefenseString}}</text></span>
          <span class="col-xs-12 current-header-container"><text class="current-value-header" id="meleeDefenseHeader">MELEE</text></span>
        </span>
      </span>
    </span>
    <!-- characteristics container -->
    <span class="col-xs-12 characteristics-container mobile-nav-container" id="characteristicContainer" ng-click="editCharacter('characteristics')">
      <span class="col-xs-12 characteristics-header">CHARACTERISTICS</span>
      <span class="col-xs-4 col-md-2 characteristic">
        <span class="col-xs-12 c-value"><text class="c-value-number">{{data.character.brawn}}</text></span>
        <span class="col-xs-12 c-label">BRAWN</span>
      </span>
      <span class="col-xs-4 col-md-2 characteristic">
        <span class="col-xs-12 c-value"><text class="c-value-number">{{data.character.agility}}</text></span>
        <span class="col-xs-12 c-label">AGILITY</span>
      </span>
      <span class="col-xs-4 col-md-2 characteristic">
        <span class="col-xs-12 c-value"><text class="c-value-number">{{data.character.intellect}}</text></span>
        <span class="col-xs-12 c-label">INTELLECT</span>
      </span>
      <span class="col-xs-4 col-md-2 characteristic">
        <span class="col-xs-12 c-value"><text class="c-value-number">{{data.character.cunning}}</text></span>
        <span class="col-xs-12 c-label">CUNNING</span>
      </span>
      <span class="col-xs-4 col-md-2 characteristic">
        <span class="col-xs-12 c-value"><text class="c-value-number">{{data.character.willpower}}</text></span>
        <span class="col-xs-12 c-label">WILLPOWER</span>
      </span>
      <span class="col-xs-4 col-md-2 characteristic">
        <span class="col-xs-12 c-value"><text class="c-value-number">{{data.character.presence}}</text></span>
        <span class="col-xs-12 c-label">PRESENCE</span>
      </span>
    </span>
    <!-- skills container -->
    <span class="col-xs-12 col-md-3 skill-container mobile-nav-container" id="skillsContainer" ng-click="editCharacter('skills')">
      <span class="col-xs-12 skills-container-header">SKILLS</span>
      <span class="col-xs-12 skills-body">
      	<span class="col-xs-12 skill-column-headers">
          <span class="col-xs-9 skill-name-header">SKILL</span>
          <span class="col-xs-3 skill-rank-header">RANK</span>
        </span>
        <span class="col-xs-12 skill" ng-repeat="skill in data.skills">
          <span class="col-xs-9 skill-name">{{skill.name}} <i ng-if="skill.isCareer == 'true'" class="far fa-medal"></i></span>
          <span class="col-xs-3 skill-rank">{{skill.rankString}}</span>
        </span>
      </span>
    </span>
    <!-- laptop/desktop section selection header -->
    <span class="xs-hidden col-md-9 section-header-container">
      <span class="col-md-12 sections">
        <span class="col-md-2 section" id="talentsSelector" ng-click="showSection('talentsContainer', 'talentsSelector')">
          <span class="col-md-12 section-label">TALENTS</span>
          <span class="col-md-12 sw-section-label star-wars-text">TALENTS</span>
        </span>
        <span class="col-md-2 section" id="forceSelector" ng-click="showSection('forceContainer', 'forceSelector')">
          <span class="col-md-12 section-label">FORCE POWERS</span>
          <span class="col-md-12 sw-section-label star-wars-text">FORCE POWERS</span>
        </span>
        <span class="col-md-2 section" id="gearSelector" ng-click="showSection('gearContainer', 'gearSelector')">
          <span class="col-md-12 section-label">GEAR</span>
          <span class="col-md-12 sw-section-label star-wars-text">GEAR</span>
        </span>
        <span class="col-md-2 section" id="vehiclesSelector" ng-click="showSection('vehiclesContainer', 'vehiclesSelector')">
          <span class="col-md-12 section-label">VEHICLES</span>
          <span class="col-md-12 sw-section-label star-wars-text">VEHICLES</span>
        </span>
        <span class="col-md-2 section" id="descriptionSelector" ng-click="showSection('characterDescriptionContainer', 'descriptionSelector')">
          <span class="col-md-12 section-label">DESCRIPTION</span>
          <span class="col-md-12 sw-section-label star-wars-text">DESCRIPTION</span>
        </span>
      </span>
    </span>
    <!-- mobile section selection -->
    <span class="lg-hidden open-menu-container" ng-click="toggleMobileNavMenu()">
      <!--i class="fab fa-phoenix-squadron"></i-->
      <i class="fas fa-journal-whills"></i>
    </span>
    <span class="col-xs-12 lg-hidden mobile-nav-menu" id="mobileNavMenu">
      <span class="col-xs-12 nav-button-container">
        <span class="col-xs-12 nav-button" ng-click="showMobileSection('characteristicContainer')">
          <i class="fab fa-phoenix-squadron"></i> Characteristics<br><text class="star-wars-text">Characteristics</text>
        </span>
        <span class="col-xs-6 nav-button" ng-click="showMobileSection('skillsContainer')">
          <i class="fas fa-stars"></i> Skills<br><text class="star-wars-text">Skills</text>
        </span>
        <span class="col-xs-6 nav-button" ng-click="showMobileSection('talentsContainer')">
          <i class="fab fa-galactic-senate"></i> Talents<br><text class="star-wars-text">Talents</text>
        </span>
        <span class="col-xs-6 nav-button" ng-click="showMobileSection('gearContainer')">
          <i class="fas fa-helmet-battle"></i> Gear<br><text class="star-wars-text">Gear</text>
        </span>
        <span class="col-xs-6 nav-button" ng-click="showMobileSection('vehiclesContainer')">
          <i class="fas fa-starship-freighter"></i> Vehicles<br><text class="star-wars-text">Vehicles</text>
        </span>
        <span class="col-xs-12 nav-button" ng-click="showMobileSection('characterDescriptionContainer')">
          <i class="fas fa-user-alien"></i> Description<br><text class="star-wars-text">Description</text>
        </span>
        <span class="col-xs-12 nav-button" ng-click="showMobileSection('forceContainer')">
          <i class="fab fa-jedi-order"></i> Force Powers<br><text class="star-wars-text">Force Powers</text>
        </span>
      </span>
    </span>
    <!-- talents container -->
    <span class="col-xs-12 col-md-9 character-details-container mobile-nav-container talents-container" id="talentsContainer">
      <span class="col-xs-12 edit-container" id="purchaseTalentsButtonContainer" ng-click="editCharacter('talents')"><i class="fab fa-galactic-senate"></i> Purchase Talents</span>
      <span ng-if="data.talents.length == 0" id="noTalentsContainer">
        <span class="col-xs-12 no-talents">You currently have 0 Talents</span>
        <span class="col-xs-12 star-wars-text">You currently have 0 Talents</span>
      </span>
      <span ng-if="data.talents.length > 0" class="col-xs-12 has-talents">
        <span class="col-xs-12 talents-headers">
          <span class="col-xs-3 talent-name-header">Name</span>
          <span class="col-xs-9 talent-description-header">Description</span>
        </span>
        <span class="col-xs-12 talents-body">
          <span class="col-xs-12 talent" ng-repeat="t in data.talents">
            <span class="col-xs-3 talent-name">{{t.name}} <i ng-if="t.forceTalent == 'true'" class="fab fa-jedi-order"></i> <span ng-if="t.ranks != '1'" class="badge">{{t.ranks}}</span></span>
            <span class="col-xs-9 talent-description">{{t.description}}</span>
          </span>
        </span>
      </span>
    </span>
    <!-- Force Powers Container -->
    <span class="col-xs-12 col-md-9 character-details-container mobile-nav-container force-container" id="forceContainer">
      force
    </span>
    <!-- gear, credits container -->
    <span class="col-xs-12 col-md-9 character-details-container mobile-nav-container gear-container" id="gearContainer">
     <span class="col-xs-12 credits-container" ng-click="editCharacter('credits')">
       <span class="pull-right credits"><img src="credits.png" height="25px" width="25px"/> {{data.character.creditsString}}</span>
     </span>
     <span class="col-xs-12 align-right edit-container" id="manageGearButtonContainer">
       <button id="manageGearButton" ng-click="editCharacter('gear')"><i class="fal fa-raygun"></i> Go Shopping</button>
      </span>
     <span ng-if="data.characterGear.length == 0" id="noGearContainer">
       <span class="col-xs-12 no-talents">You currently have no gear</span>
       <span class="col-xs-12 star-wars-text">You currently have no gear</span>
     </span>
     <span ng-if="data.characterGear.length > 0" id="characterGearList">
       <span class="col-xs-12 character-gear-container">
         <span class="col-xs-12 gear-headers">
           <span class="col-xs-8 gear-header">Name:</span>
           <span class="col-xs-2 gear-header">Quantity:</span>
           <span class="col-xs-2 gear-header" ng-click="toggleGearInfo('all')"><i class="fal fa-chevron-left gear-info-icon" id="allChevron"></i></span>
         </span>
         <span class="col-xs-12 gear-item-container">
           <div class="col-xs-12 cg-item" ng-repeat="item in data.characterGear" id="parent{{item.sysID}}">
             <span class="col-xs-8 gear-detail item-name">{{item.name}}</span>
             <span class="col-xs-2 gear-detail item-quantity">{{item.quantity}}</span>
             <span class="col-xs-2 gear-detail expand-icon" ng-click="toggleGearInfo(item.sysID)"><i class="fal fa-chevron-left gear-info-icon" id="{{item.iconID}}"></i></span>
             <span class="col-xs-12 full-gear-detail" id="{{item.sysID}}">
               <span class="col-xs-4 gear-detail">
                 <span class="col-xs-12 gear-detail-label">Encumbrance:</span>
                 <span class="col-xs-12 gear-detail-value">{{item.encumbrance}}</span>
               </span>
               <span class="col-xs-4 gear-detail">
                 <span class="col-xs-12 gear-detail-label">HP:</span>
                 <span class="col-xs-12 gear-detail-value">{{item.hardPoints}}</span>
               </span>
               <span class="col-xs-4 gear-detail">
                 <span class="col-xs-12 gear-detail-label">Type:</span>
                 <span class="col-xs-12 gear-detail-value">{{item.type}}</span>
               </span>
               <span ng-if="item.typeID == 'weapon'" class="col-xs-4 gear-detail">
                 <span class="col-xs-12 gear-detail-label">Damage:</span>
                 <span class="col-xs-12 gear-detail-value">{{item.damage}}</span>
               </span>
               <span ng-if="item.typeID == 'weapon'" class="col-xs-4 gear-detail">
                 <span class="col-xs-12 gear-detail-label">Crit:</span>
                 <span class="col-xs-12 gear-detail-value">{{item.crit}}</span>
               </span>
               <span ng-if="item.typeID == 'weapon'" class="col-xs-4 gear-detail">
                 <span class="col-xs-12 gear-detail-label">Skill Used:</span>
                 <span class="col-xs-12 gear-detail-value">{{item.skillUsed}}</span>
               </span>
               <span ng-if="item.typeID == 'weapon'" class="col-xs-4 gear-detail">
                 <span class="col-xs-12 gear-detail-label">Range:</span>
                 <span class="col-xs-12 gear-detail-value">{{item.range}}</span>
               </span>
               <span ng-if="item.typeID == 'weapon'" class="col-xs-4 gear-detail">
                 <span class="col-xs-12 gear-detail-label">Special:</span>
                 <span class="col-xs-12 gear-detail-value">{{item.weaponQualities}}</span>
               </span>
               <span ng-if="item.typeID == 'armor'" class="col-xs-4 gear-detail">
                 <span class="col-xs-12 gear-detail-label">Defense:</span>
                 <span class="col-xs-12 gear-detail-value">{{item.defense}}</span>
               </span>
               <span ng-if="item.typeID == 'armor'" class="col-xs-4 gear-detail">
                 <span class="col-xs-12 gear-detail-label">Soak:</span>
                 <span class="col-xs-12 gear-detail-value">{{item.soak}}</span>
               </span>
               <span class="col-xs-12 gear-detail">
                 <span class="col-xs-12 gear-detail-label">Description:</span>
                 <span class="col-xs-12 gear-detail-value">{{item.description}}</span>
               </span>
               <span class="col-xs-12" id="removeItemButtonContainer">
                 <button id="removeItemButton" ng-click="removeItem(item.sysID)">Remove<br><text class="star-wars-text">Remove</text></button>
               </span>
             </span>
           </div>
         </span>
       </span>
     </span>
    </span>
    <!-- vehicles container -->
    <span class="col-xs-12 col-md-9 character-details-container mobile-nav-container vehicles-container" id="vehiclesContainer">
      vehicles
    </span>
    <!-- character description -->
    <span class="col-xs-12 col-md-9 character-details-container mobile-nav-container character-description-container" id="characterDescriptionContainer">
      <span class="col-xs-12 edit-container" ng-click="editCharacter('description')">
        <i class="fab fa-sith"></i> Edit Details
      </span>
      <span class="col-xs-4 description-field">
        <span class="col-xs-12 desc-label">Gender:</span>
        <span class="col-xs-12 desc-value">{{data.character.gender}}</span>
      </span>
      <span class="col-xs-4 description-field">
        <span class="col-xs-12 desc-label">Age:</span>
        <span class="col-xs-12 desc-value">{{data.character.age}}</span>
      </span>
      <span class="col-xs-4 description-field">
        <span class="col-xs-12 desc-label">Eyes:</span>
        <span class="col-xs-12 desc-value">{{data.character.eyes}}</span>
      </span>
      <span class="col-xs-4 description-field">
        <span class="col-xs-12 desc-label">Hair:</span>
        <span class="col-xs-12 desc-value">{{data.character.hair}}</span>
      </span>
      <span class="col-xs-4 description-field">
        <span class="col-xs-12 desc-label">Height:</span>
        <span class="col-xs-12 desc-value">{{data.character.height}}</span>
      </span>
      <span class="col-xs-4 description-field">
        <span class="col-xs-12 desc-label">Weight:</span>
        <span class="col-xs-12 desc-value">{{data.character.weight}}</span>
      </span>
      <span class="col-xs-12 description-field">
        <span class="col-xs-12 desc-label">Notable Features:</span>
        <span class="col-xs-12 desc-value">{{data.character.notableFeatures}}</span>
      </span>
      <span class="col-xs-12 description-field">
        <span class="col-xs-12 desc-label">Background:</span>
        <span class="col-xs-12 desc-value">{{data.character.background}}</span>
      </span>
    </span>
    
    <!-- edit character containers -->
    <span class="edit-character" id="editCharacterDescription">
      <!-- edit description -->
      <span class="col-xs-12 close-button" ng-click="closeEditContainer('description')"><i class="fas fa-times"></i></span>
      <span class="col-xs-12 edit-description-body">
        <span class="col-xs-12 col-md-4 description-field">
          <label for="gender">Gender:</label><br>
          <input class="sw-input" type="text" id="gender" name="gender" value="{{data.character.gender}}"/>
        </span>
        <span class="col-xs-12 col-md-4 description-field">
          <label for="age">Age:</label><br>
          <input class="sw-input" type="text" inputmode="numeric" pattern="[0-9]*" id="age" name="age" value="{{data.character.age}}"/>
        </span>
        <span class="col-xs-12 col-md-4 description-field">
          <label for="eyes">Eyes:</label><br>
          <input class="sw-input" type="text" id="eyes" name="eyes" value="{{data.character.eyes}}"/>
        </span>
        <span class="col-xs-12 col-md-4 description-field">
          <label for="height">Height:</label><br>
          <input class="sw-input" type="text" id="height" name="height" value="{{data.character.height}}"/>
        </span>
        <span class="col-xs-12 col-md-4 description-field">
          <label for="weight">Weight:</label><br>
          <input class="sw-input" type="text" inputmode="numeric" pattern="[0-9]*" id="weight" name="weight" value="{{data.character.weight}}"/>
        </span>
        <span class="col-xs-12 col-md-4 description-field">
          <label for="hair">Hair:</label><br>
          <input class="sw-input" type="text" id="hair" name="hair" value="{{data.character.hair}}"/>
        </span>
        <span class="col-xs-12 description-field">
          <label for="notableFeatures">Notable Features:</label><br>
          <textarea class="sw-input" type="text" id="notableFeatures" name="notableFeatures" placeholder="{{data.character.notableFeatures}}"></textarea>
        </span>
        <span class="col-xs-12 description-field">
          <label for="background">Background:</label><br>
          <textarea class="sw-input" type="text" id="background" name="background" placeholder="{{data.character.background}}"></textarea>
        </span>
        <span class="col-xs-12 save-edits">
          <span class="col-xs-12 save-button-container">
            <button id="saveEditsButton" ng-click="saveEdits('description')">Save<br><text class="star-wars-text" id="swSaveButton">Save</text></button>
          </span>
        </span>
      </span>
    </span>
    <!-- edit skills -->
    <span class="edit-character" id="editSkillsContainer">
      <span class="col-xs-12 close-button" ng-click="closeEditContainer('skills')"><i class="fas fa-times"></i></span>
      <span class="col-xs-12 edit-skills-body">
        <span class="col-xs-12 skills-header">
          <span class="col-xs-6 skill-header">Name:</span>
          <span class="col-xs-3 skill-header">Rank:</span>
          <span class="col-xs-3 skill-header"></span>
        </span>
        <span class="col-xs-12 edit-skills-list">
          <span class="col-xs-12 edit-skills" ng-repeat="skill in data.skills">
          	<span class="col-xs-6 skill-detail">{{skill.name}} <i ng-if="skill.isCareer == 'true'" class="far fa-medal"></i></span>
            <span class="col-xs-3 skill-detail">{{skill.rankString}}</span>
            <span class="col-xs-3 skill-detail skill-increase-button" ng-if="skill.costToNextRank <= data.character.availableXPInt && skill.rankInt < 5"><button id="increaseSkillButton" ng-click="increaseSkill(skill)"><i class="fad fa-swords-laser lightsabers-plus-minus"></i></button></span>
        	</span>
      	</span>
    	</span>
    </span>
    <!-- edit name -->
    <span class="edit-character" id="editNameContainer">
    	<span class="col-xs-12 close-button" ng-click="closeEditContainer('name')"><i class="fas fa-times"></i></span>
      <span class="col-xs-12 edit-name-body">
        <label for="nameInput">Name:</label><br>
        <input class="sw-input" type="text" id="nameInput" name="nameInput" value="{{data.character.name}}"/>
      </span>
      <span class="col-xs-12 save-edits">
          <span class="col-xs-12 save-button-container">
            <button id="saveEditsButton" ng-click="saveEdits('name')">Save<br><text class="star-wars-text" id="swSaveButton">Save</text></button>
          </span>
        </span>
    </span>
    <!-- edit talents -->
    <span class="edit-character" id="editTalentsContainer">
      <span class="col-xs-12 close-button" ng-click="closeEditContainer('talents')"><i class="fas fa-times"></i></span>
      <span class="col-xs-12 purchase-talents-body">
        <span class="col-xs-12 talents-headers">
          <span class="col-xs-6 talent-header">Name:</span>
          <span class="col-xs-2 talent-header">Tier:</span>
          <span class="col-xs-2 talent-header">XP Cost:</span>
          <span class="col-xs-2 talent-header"></span>
        </span>
        <span class="col-xs-12" id="purchaseTalentsContainer">
          <span class="col-xs-12 talent-item" ng-if="item.canPurchase && !item.isPurchased" ng-repeat="item in data.availableTalents">
            <span class="col-xs-6 talent-detail">{{item.name}} <i ng-if="item.forceTalent == 'true'" class="fab fa-jedi-order"></i> <i class="far fa-info-circle" ng-click="toggleTalentInfo(item)"></i></span>
            <span class="col-xs-2 talent-detail">{{item.tierString}}</span>
            <span class="col-xs-2 talent-detail">{{item.costToPurchase}}</span>
            <span class="col-xs-2 talent-detail"><button class="purchase-gear-button" ng-click="purchaseTalent(item)">Purchase</button></span>
          </span>
        </span>
      </span>
    </span>
    <!-- talent info -->
    <span class="talent-info-box" id="talentInfoBox">
      <span class="col-xs-12 close-button" ng-click="closeEditContainer('talentInfoBox')"><i class="fas fa-times"></i></span>
      <span class="col-xs-12 talent-detail-body">
        <span class="col-xs-12 talent-info" id="talentInfoName">{{data.currentTalentInfo.name}} <i ng-if="data.currentTalentInfo.forceTalent == 'true'" class="fab fa-jedi-order"></i><br><text class="star-wars-text">{{data.currentTalentInfo.name}}</text></span>
        <span class="col-xs-12 talent-info" id="talentInfoActive">{{data.currentTalentInfo.activeOrPassive}}</span>
        <span class="col-xs-12 talent-info" id="talentInfoDescription">{{data.currentTalentInfo.description}}</span>
      </span>
      <span class="col-xs-12 talent-detail" id="talentInfoPurchaseContainer"><button class="purchase-gear-button" ng-click="purchaseTalent(item)">Purchase</button></span>
    </span>
    <!-- edit credits -->
    <span class="edit-character" id="editCreditsContainer">
    	<span class="col-xs-12 close-button" ng-click="closeEditContainer('credits')"><i class="fas fa-times"></i></span>
      <span class="col-xs-12 edit-name-body">
        <label for="creditsInput">Credits:</label><br>
        <input class="sw-input" type="text" id="creditsInput" name="creditsInput" inputmode="numeric" pattern="[0-9]*" value="{{data.character.creditsString}}"/>
      </span>
      <span class="col-xs-12 save-edits">
          <span class="col-xs-12 save-button-container">
            <button id="saveEditsButton" ng-click="saveEdits('credits')">Save<br><text class="star-wars-text" id="swSaveButton">Save</text></button>
          </span>
        </span>
    </span>
    <!-- edit gear/marketplace -->
    <span class="edit-character" id="marketplaceContainer">
    	<span class="col-xs-12 close-button" ng-click="closeEditContainer('gear')"><i class="fas fa-times"></i></span>
      <span class="col-xs-12 marketplace-body">
        <span class="col-xs-12 filter-buttons">
          <span class="col-xs-4 col-md-12"><button class="filter-button" ng-click="filterGear('all')">View All<br><text class="star-wars-text sw-filter">View All</text></button></span>
          <span class="col-xs-4 col-md-3 first-filter"><button class="filter-button" ng-click="filterGear('weapon')">Weapons<br><text class="star-wars-text sw-filter">Weapons</text></button></span>
          <span class="col-xs-4 col-md-3"><button class="filter-button" ng-click="filterGear('armor')">Armor<br><text class="star-wars-text sw-filter">Armor</text></button></span>
          <span class="col-xs-4 col-md-3"><button class="filter-button" ng-click="filterGear('gear')">Gear<br><text class="star-wars-text sw-filter">Gear</text></button></span>
          <span class="col-xs-4 col-md-3"><button class="filter-button" ng-click="filterGear('mods')">Mods<br><text class="star-wars-text sw-filter">Mods</text></button></span>
          <span class="col-xs-12"><button class="filter-button" ng-click="filterGear('black_market_items')">Black Market Items<br><text class="star-wars-text sw-filter">Black Market Items</text></button></span>
        </span>
        <span class="col-xs-12 marketplace-items-container">
          <span class="col-xs-12 marketplace-headers">
            <span class="col-xs-6 marketplace-header">Name:</span>
            <span class="col-xs-2 marketplace-header">Price:</span>
            <span class="col-xs-2 marketplace-header">Quantity:</span>
            <span class="col-xs-2 marketplace-header"></span>
          </span>
          <span class="col-xs-12 marketplace-item" ng-repeat="item in data.availableGear">
            <span class="col-xs-6 item-detail">{{item.name}}</span>
            <span class="col-xs-2 item-detail">{{item.price}}</span>
            <input class="col-xs-2 sw-input" type="text" id="{{item.name}}QuantityInput" name="{{item.name}}QuantityInput" inputmode="numeric" pattern="[0-9]*" value="1"/>
            <span class="col-xs-2 item-detail"><button class="purchase-gear-button" ng-click="purhcaseItem(item)">Purchase</button></span>
          </span>
        </span>
      </span>
    </span>
    <!-- edit soak -->
    <span class="edit-character" id="editSoakContainer">
    	<span class="col-xs-12 close-button" ng-click="closeEditContainer('soak')"><i class="fas fa-times"></i></span>
    	<span class="col-xs-12 edit-soak-body">
        <label for="soakInput">Soak:</label><br>
        <input class="sw-input" type="text" id="soakInput" name="soakInput" inputmode="numeric" patter="[0-9]*" value="{{data.character.soakString}}"/>
        <span class="col-xs-12 save-edits">
          <span class="col-xs-12 save-button-container">
            <button id="saveEditsButton" ng-click="saveEdits('soak')">Save<br><text class="star-wars-text" id="swSaveButton">Save</text></button>
          </span>
        </span>
      </span>
    </span>
    <!-- edit wounds -->
    <span class="edit-character" id="editWoundsContainer">
    	<span class="col-xs-12 close-button" ng-click="closeEditContainer('wounds')"><i class="fas fa-times"></i></span>
    	<span class="col-xs-12 edit-wounds-body">
        <span class="col-xs-12 col-md-4">
        	<label for="woundThresholdInput">Wounds Threshold:</label><br>
        	<input class="sw-input" type="text" id="woundThresholdInput" name="woundThresholdInput" inputmode="numeric" pattern="[0-9]*" value="{{data.character.woundThresholdString}}"/>
        </span>
        <span class="col-xs-12 col-md-4">
          <label for="woundCurrentInput">Wounds Current:</label><br>
          <input class="sw-input" type="text" id="woundCurrentInput" name="woundCurrentInput" inputmode="numeric" pattern="[0-9]*" value="{{data.character.woundCurrentString}}">
        </span>
        <span class="col-xs-12 save-edits">
          <span class="col-xs-12 save-button-container">
            <button id="saveEditsButton" ng-click="saveEdits('wounds')">Save<br><text class="star-wars-text" id="swSaveButton">Save</text></button>
          </span>
        </span>
      </span>
    </span>
    <!-- edit strain -->
    <span class="edit-character" id="editStrainContainer">
    	<span class="col-xs-12 close-button" ng-click="closeEditContainer('strain')"><i class="fas fa-times"></i></span>
    	<span class="col-xs-12 edit-wounds-body">
        <span class="col-xs-12 col-md-4">
        	<label for="strainThresholdInput">Strain Threshold:</label><br>
        	<input class="sw-input" type="text" id="strainThresholdInput" name="strainThresholdInput" inputmode="numeric" pattern="[0-9]*" value="{{data.character.strainThresholdString}}"/>
        </span>
        <span class="col-xs-12 col-md-4">
          <label for="strainCurrentInput">Strain Current:</label><br>
          <input class="sw-input" type="text" id="strainCurrentInput" name="strainCurrentInput" inputmode="numeric" pattern="[0-9]*" value="{{data.character.strainCurrentString}}">
        </span>
        <span class="col-xs-12 save-edits">
          <span class="col-xs-12 save-button-container">
            <button id="saveEditsButton" ng-click="saveEdits('strain')">Save<br><text class="star-wars-text" id="swSaveButton">Save</text></button>
          </span>
        </span>
      </span>
    </span>
    <!-- edit defense -->
    <span class="edit-character" id="editDefenseContainer">
    	<span class="col-xs-12 close-button" ng-click="closeEditContainer('defense')"><i class="fas fa-times"></i></span>
    	<span class="col-xs-12 edit-wounds-body">
        <span class="col-xs-12 col-md-4">
        	<label for="rangedDefenseInput">Ranged Defense:</label><br>
        	<input class="sw-input" type="text" id="rangedDefenseInput" name="rangedDefenseInput" inputmode="numeric" pattern="[0-9]*" value="{{data.character.rangedDefenseString}}"/>
        </span>
        <span class="col-xs-12 col-md-4">
          <label for="meleeDefenseInput">Melee Defense:</label><br>
          <input class="sw-input" type="text" id="meleeDefenseInput" name="meleeDefenseInput" inputmode="numeric" pattern="[0-9]*" value="{{data.character.meleeDefenseString}}">
        </span>
        <span class="col-xs-12 save-edits">
          <span class="col-xs-12 save-button-container">
            <button id="saveEditsButton" ng-click="saveEdits('defense')">Save<br><text class="star-wars-text" id="swSaveButton">Save</text></button>
          </span>
        </span>
      </span>
    </span>
    <!-- edit characteristics -->
    <span class="edit-character" id="editCharacteristicsContainer">
    	<span class="col-xs-12 close-button" ng-click="closeEditContainer('characteristics')"><i class="fas fa-times"></i></span>
      <span class="col-xs-12 edit-characteristics-body">
        <span class="col-xs-12 col-md-4">
          <label for="brawn">Brawn:</label><br>
          <input class="sw-input" type="text" id="brawn" name="brawn" inputmode="numeric" pattern="[0-9]*" value="{{data.character.brawn}}"/>
        </span>
        <span class="col-xs-12 col-md-4">
          <label for="agility">Agility:</label><br>
          <input class="sw-input" type="text" id="agility" name="agility" inputmode="numeric" pattern="[0-9]*" value="{{data.character.agility}}"/>
        </span>
        <span class="col-xs-12 col-md-4">
          <label for="intellect">Intellect:</label><br>
          <input class="sw-input" type="text" id="intellect" name="intellect" inputmode="numeric" pattern="[0-9]*" value="{{data.character.intellect}}"/>
        </span>
        <span class="col-xs-12 col-md-4">
          <label for="cunning">Cunning:</label><br>
          <input class="sw-input" type="text" id="cunning" name="cunning" inputmode="numeric" pattern="[0-9]*" value="{{data.character.cunning}}"/>
        </span>
        <span class="col-xs-12 col-md-4">
          <label for="willpower">Willpower:</label><br>
          <input class="sw-input" type="text" id="willpower" name="willpower" inputmode="numeric" pattern="[0-9]*" value="{{data.character.willpower}}"/>
        </span>
        <span class="col-xs-12 col-md-4">
          <label for="presence">Presence:</label><br>
          <input class="sw-input" type="text" id="presence" name="presence" inputmode="numeric" pattern="[0-9]*" value="{{data.character.presence}}"/>
        </span>
        <span class="col-xs-12 save-edits">
          <span class="col-xs-12 save-button-container">
            <button id="saveEditsButton" ng-click="saveEdits('characteristics')">Save<br><text class="star-wars-text" id="swSaveButton">Save</text></button>
          </span>
        </span>
      </span>
    </span>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
